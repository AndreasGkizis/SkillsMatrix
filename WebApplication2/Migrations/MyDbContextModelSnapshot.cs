// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.HardSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HardSkillId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HardSkillId");

                    b.ToTable("HardSkills");
                });

            modelBuilder.Entity("Domain.SoftSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SoftSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftSkillId");

                    b.ToTable("SoftSkills");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HardSkillId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SoftSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HardSkillId");

                    b.HasIndex("SoftSkillId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.HardSkill", b =>
                {
                    b.HasOne("Domain.HardSkill", null)
                        .WithMany("SubSkills")
                        .HasForeignKey("HardSkillId");
                });

            modelBuilder.Entity("Domain.SoftSkill", b =>
                {
                    b.HasOne("Domain.SoftSkill", null)
                        .WithMany("SubSkills")
                        .HasForeignKey("SoftSkillId");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.HasOne("Domain.HardSkill", null)
                        .WithMany("Tags")
                        .HasForeignKey("HardSkillId");

                    b.HasOne("Domain.SoftSkill", null)
                        .WithMany("Tags")
                        .HasForeignKey("SoftSkillId");
                });

            modelBuilder.Entity("Domain.HardSkill", b =>
                {
                    b.Navigation("SubSkills");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.SoftSkill", b =>
                {
                    b.Navigation("SubSkills");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
